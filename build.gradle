plugins{
    id "java"
    id "com.github.node-gradle.node" version "3.5.0" /* Enables automatic NodeJs package resolution via package.json*/
}


/* Project Structure */
def srcDir = 'main'
def srcJava = "${srcDir}/gameserver/src"
def srcJavascript = "${srcDir}/webserver/"
def srcWebserver = "${srcJavascript}/src"
def rscAll = "main/resources"

OperatingSystem os = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem;

def javaClasspath = sourceSets.main.runtimeClasspath
def javaServer = "GameServer"
def javascriptServerPath = "${srcWebserver}/server.js"

/* Gradles output - should not be uploaded to git, but may for live demo, so its flawless*/
project.buildDir = './generated'


/*The Java Source Directories*/
sourceSets.main{
    java.setSrcDirs([srcJava])
    resources.setSrcDirs([rscAll])
}

repositories{
    mavenCentral()
}

/* Java dependencies */
dependencies {
    implementation 'org.java-websocket:Java-WebSocket:1.5.3'
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
    implementation 'org.json:json:20220924'
    implementation 'com.google.code.gson:gson:2.10'
    implementation "org.slf4j:slf4j-simple:2.0.6"
    testImplementation 'org.slf4j:slf4j-simple:2.0.6'
    implementation 'ch.qos.logback:logback-classic:1.2.3'
}

node{
    /*Node will not be downloaded - the global install is used*/
    download = false
    nodeProjectDir = file("${project.projectDir}/${srcJavascript}")
}


/* NOT PARALLELIZABLE */
/* Runs the Game Server */
task runWebsocket(type:JavaExec)  {
    println "Starting Gameserver..."
    classpath = javaClasspath //sourceSets.main.runtimeClasspath
    println classpath.asPath
    mainClass = javaServer
}

/* NOT PARALLELIZABLE */
/* Node build task - installs npm dependencies and runs the server */
task runWebserver(type: NodeTask, dependsOn: 'npmInstall') {
    println "Starting Webserver..."
    script = file("${javascriptServerPath}")
}

/* PARALLELIZABLE */
/* Runs entire project */
task runServer(type:Exec) {
    println "Starting Multiplayer-Snake server..."
    if(os.isLinux() || os.isMacOsX()) {
        commandLine = ['./runServer.sh', javaClasspath.asPath, javaServer, javascriptServerPath]
    }
    else if(os.isWindows()){
        commandLine = ['cmd', '/C', 'start', 'runServer.bat', '"'+ javaClasspath.asPath +'"', javaServer, javascriptServerPath]
    }
}

/* todo in case we want to have this for windows too
task kill(type:Exec){
	if(os.isLinux() || os.isMacOsX()) {
		commandLine = ['./kill.sh']
	}
}
 */

runServer.dependsOn(["build", "npmInstall"])
build.dependsOn(["npmInstall"])
