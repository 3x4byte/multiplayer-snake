plugins{
    id "java"
    id "com.github.node-gradle.node" version "3.5.0" /* Enables automatic NodeJs package resolution via package.json*/
}

/* Project Structure */
def srcDir = 'main'
    def srcJava = "${srcDir}/gameserver/src"
    def srcJavascript = "${srcDir}/webserver/"
        def srcWebserver = "${srcJavascript}/src"
def rscAll = "main/resources"

def javaClasspath = sourceSets.main.runtimeClasspath
def javaServer = "GameServer"
def javascriptServerPath = "${srcWebserver}/server.js"

/* Gradles output - should not be uploaded to git, but may for live demo, so its flawless*/
project.buildDir = '/generated'


/*The Java Source Directories*/
sourceSets.main{
    java.setSrcDirs([srcJava])
    resources.setSrcDirs([rscAll])
}

repositories{
    mavenCentral()
}

/* Java dependencies */
dependencies {
    implementation 'org.java-websocket:Java-WebSocket:1.5.3'
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
}

node{
    /*Node will not be downloaded - the global install is used*/
    download = false
    nodeProjectDir = file("${project.projectDir}/${srcJavascript}")
}

/* NOT PARALLELIZABLE */
/* Runs the Game Server */
task runWebsocket(type:JavaExec)  {
    println "Starting Gameserver..."
    classpath = javaClasspath //sourceSets.main.runtimeClasspath
    println classpath.asPath
    mainClass = javaServer
}

/* NOT PARALLELIZABLE */
/* Node build task - installs npm dependencies and runs the server */
task runWebserver(type: NodeTask, dependsOn: 'npmInstall') {
    println "Starting Webserver..."
    script = file("${javascriptServerPath}")
}

/* PARALLELIZABLE */
/* Runs entire project */
task runServer(type:Exec) {
    println "Starting Multiplayer-Snake server..."
    commandLine = ['cmd', '/C', 'start', 'runServer.bat', '"'+ javaClasspath.asPath +'"', javaServer, javascriptServerPath]
}

runServer.dependsOn(["build", "npmInstall"])